#!/bin/bash
errecho () { echo $@ > /dev/stderr; }

usage="Usage: $(basename $0) [-v] [-g GIT_OPTS] [-u UPSTREAM_COMMIT] [-d DEBIAN_COMMIT]"

gitCmd="git"
usCommit="upstream-unstable"
debCommit="debian-unstable"
verbose=""

while getopts ":g:u:d:v" options; do
    case $options in
	g ) gitCmd="git ${OPTARG}";;
	u ) usCommit="${OPTARG}";;
	d ) debCommit="${OPTARG}";;
	v ) verbose="TRUE";;
	* ) echo $usage
	    exit 1;;
    esac
done

pkgsrc=$(dpkg-parsechangelog | sed -n 's/^Source: //p')
changelogVersion=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
lastReleaseTag=$(${gitCmd} describe --abbrev=0 --tags --match "${pkgsrc}_*" ${debCommit})
lrGitCommits=$(${gitCmd} rev-list ${lastReleaseTag}..${debCommit} --count)
lastRelease="${lastReleaseTag##${pkgsrc}_}"

if [ -e update_shaderc_sources.py ]; then
    # I'm shaderc, and I'm special...
    [ $(command -v jq) ] || ( echo "$0 needs the 'jq' program: \"apt-get install jq\""; exit 1 )
    shadercCommit=$(jq -r '.commits[] | select(.name == "shaderc").commit' known_good.json)
    upstreamTag=$(${gitCmd} describe --abbrev=0 --tags  --exclude "${pkgsrc}_*" ${shadercCommit})
    usGitCommits=$(${gitCmd} rev-list ${upstreamTag}..${shadercCommit} --count)
else
    upstreamTag=$(${gitCmd} describe --abbrev=0 --tags  --exclude "${pkgsrc}_*" ${usCommit})
    usGitCommits=$(${gitCmd} rev-list ${upstreamTag}..${usCommit} --count)
fi
usBase=$(expr match "$upstreamTag" '^[^0-9]*\(.*$\)')

# Reverse any ~ substitutions
lastRelease=${lastRelease/"@t@"/"~"}

# Grab the base upstream version (everything to the left of the first "-")
lrBase=${lastRelease%%-*}
clBase=${changelogVersion%%-*}

# Grab the debian packaging version
lrDeb=$(expr match "$lastRelease" '^.\+-\([0-9]\+\)_.*')
clDeb=$(expr match "$changelogVersion" '^.\+-\([0-9]\+\)')

# Pull out the build number from latest release tag.
lrBuild=$(expr match "$lastRelease" '^.\+_\([0-9]\+\).*')

# The latest build/release tag and changelog should match.
if $(dpkg --compare-versions "${clBase}-${clDeb}" ne "${lrBase}-${lrDeb}"); then
    errecho "WARNING: Changelog and latest release tag do not match"
fi

if [ "$lrGitCommits" == "0" ]; then
    lrVersion="${lrBase}"
else
    lrVersion="${lrBase}+${lrGitCommits}"
fi
if [ "$usGitCommits" == "0" ]; then
    usVersion="${usBase}"
else
    usVersion="${usBase}+${usGitCommits}"
fi

if [ "$verbose" ]; then
    errecho "Version strings based on:"
    errecho "    Latest release tag: ${lrVersion}"
    errecho "    Latest upstream tag: ${usVersion}"
fi

if [ -z "$upstreamTag" ]; then
    echo ${lrVersion}
elif $(dpkg --compare-versions "${usVersion}" ge "${lrVersion}"); then
    echo ${usVersion}
else
    errecho "################################"
    errecho "WARNING: Upstream version (${usVersion}) earlier than last release ${lastRelease}"
    errecho "################################"
    echo ${lrVersion}
fi
